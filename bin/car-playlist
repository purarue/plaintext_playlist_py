#!/usr/bin/env python3
# asks me to add something to playlist that I listen to in the car

import os
import json
import atexit
import shlex
import subprocess
from pathlib import Path

import click
from my.core.__main__ import _ui_getchar_pick
from plaintext_playlist_py import playlistdir, PlaylistPath, iterate_playlists


Lines = set[str]

already_prompted_cache = Path(os.environ["HPIDATA"]) / "car_playlist_prompted.json"


class JSONCache:
    def __init__(self):
        self.load_data()

    def __contains__(self, data: PlaylistPath) -> bool:
        return data.path in self.data

    def load_data(self) -> Lines:
        self.datafile = already_prompted_cache
        self.data: Lines = set()
        if self.datafile.exists():
            self.data = set(json.loads(self.datafile.read_text()))
        return self.data

    def add_line(self, data: PlaylistPath) -> None:
        self.data.add(data.path)
        self._write()

    def _write(self):
        encoded = json.dumps(list(sorted(self.data)), indent=4)
        self.datafile.write_text(encoded)


def add_to_car_playlist(path: PlaylistPath, to_playlist: str = "car") -> None:
    with open(playlistdir() / f"{to_playlist}.txt", "a") as f:
        f.write(f"{path.path}\n")


mpv_absolute: str | None = None


def mpv(mp3: str) -> None:
    global mpv_absolute

    if not mpv_absolute:
        mpv_possible_paths = [
            os.environ.get("MPV_PATH"),
            "/usr/bin/mpv",
            "/bin/mpv",
            "/usr/local/bin/mpv",
        ]
        for path in mpv_possible_paths:
            if path and os.path.exists(path):
                mpv_absolute = path
                break
        else:
            raise ValueError(f"mpv not found in {mpv_possible_paths=}")

    proc = subprocess.Popen(shlex.split(f'{mpv_absolute} "{mp3}" --no-audio-display'))
    proc.wait()


choices = ["add", "skip", "mpv"]


def prompt(
    path: PlaylistPath,
    cache: JSONCache,
    *,
    msg: str,
    to_playlist: str = "car",
    autoplay: bool = False,
) -> None:
    f = str(path.in_musicdir().absolute())
    if autoplay:
        mpv(f)

    promptstr = str(path.path)
    if msg:
        promptstr += msg
    click.clear()
    chosen = choices[_ui_getchar_pick(choices, prompt=promptstr)]
    if chosen == "mpv":
        mpv(f)
        prompt(path, cache, to_playlist=to_playlist, msg=msg)  # recurse
    else:
        if chosen == "add":
            add_to_car_playlist(path, to_playlist)
        cache.add_line(path)


@click.command()
@click.option(
    "-a", "--autoplay", is_flag=True, default=False, help="play mpv automatically"
)
def main(autoplay: bool) -> None:
    cache = JSONCache()
    atexit.register(lambda: cache._write())
    paths = list(filter(lambda pp: pp not in cache, iterate_playlists()))
    while len(paths) > 0:
        newest = paths.pop(0)
        prompt(newest, cache, autoplay=autoplay, msg=f" ({len(paths) + 1} left)")
    click.secho(f"car-playlist: {click.style('done', 'green')}")


if __name__ == "__main__":
    main()
