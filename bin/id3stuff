#!/usr/bin/env python3

"""
Personal opinionated ID3 stuff -- forever a WIP script

- Make sure every song has track, album, artist and album artist ID3 data
- Prompt for Album Art to be copied/extracted from APIC frames/downloaded to 'cover.jpg' if not present

In the future... ?

- Resolve broken/similar artists names for the same artist (different spellings/translations)
- Add Track Numbers
- Perhaps make this Plex Compliant with some other tool?
- Add Year
- Add Genre

It could be used to:
- Remove Comments/Useless Data

but currently I use a separate mpv_clean_priv_frames:
https://github.com/seanbreckenridge/HPI-personal/blob/master/scripts/mpv_clean_priv_frames

which searches https://github.com/seanbreckenridge/mpv-history-daemon
data instead of pre-emptively removing possibly useful metadata
"""

import os
import tempfile
import shutil
import subprocess
import webbrowser
from urllib.parse import urlparse
from io import BytesIO
from typing import Sequence, List, Optional, Dict, Iterator, Union
from functools import partial
from pathlib import Path
from pprint import pprint

import click
import requests
from PIL import Image  # type: ignore[import]
from mutagen.id3 import ID3  # type: ignore[import]
from my.core.__main__ import _ui_getchar_pick  # from https://github.com/karlicoss/HPI
from plaintext_playlist_py import Collection, default_music_dir
from plaintext_playlist_py.id3 import safe_id3, BASIC_TAGS


eprint = partial(click.echo, err=True)


OTHER = "Other"


def _pick_and_or_edit(choices: List[str], prompt: str = "Select from:") -> str:
    """
    Pick from the choices (parts of the Path) to start off with
    then possibly edit the text in your editor to get it to exactly what you want
    """

    ch = list(choices)
    ch.append(OTHER)

    chosen = ch[_ui_getchar_pick(ch, prompt=prompt)]
    if chosen == OTHER:
        chosen = ""

    if chosen == "" or click.confirm(f"Edit {chosen}?", default=False):
        res = click.edit(chosen)
        if res is not None:  # None if no changes made to text
            chosen = res.strip()

    return chosen


# if key is None, checks all BASIC_TAGS. else, checks the one you specify
def _has_any_missing_basic_id3(
    collection: Collection, key: Optional[str] = None
) -> bool:
    if key is None:
        for tag in BASIC_TAGS:
            if _has_any_missing_basic_id3(collection, key=tag):
                return True
    else:
        for f in collection.paths:
            id3f = safe_id3(f)
            if key not in id3f:
                click.echo(f"{f} missing {key}")
                return True
            else:
                data = id3f[key]
                # no data on the key
                if len(data) == 0:
                    return True
                # if the text is empty
                if len(data[0].strip()) == 0:
                    return True
    return False


def _extract_current_id3_data(
    mp3: Path,
    for_tags: Union[Dict[str, bool], Sequence[str]] = BASIC_TAGS,
    add_single_description: bool = True,
) -> Sequence[str]:
    tags: List[str] = []
    e = safe_id3(mp3)
    if isinstance(for_tags, dict):
        for_tags = list(for_tags.keys())
    for tag in for_tags:
        if tag in e:
            for data in e[tag]:
                tags.append(data)
    # Add Song Name - Title to the list of choices
    # so creating 'singles' Albums is easy
    if add_single_description and "title" in e and e["title"]:
        title = e["title"][0]
        tags.append(f"{title} - Single")
    return tuple(tags)


def attach_basic_id3_metadata(
    *, base_music_dir: Path, collection: Collection, force: bool = False
) -> None:
    """
    Track Name
    Artist
    Album
    AlbumArtist

    The force flag can be given to force a prompt, even if the tags already
    exist. Can be thought of as overwriting the data
    """
    choices = []
    for prt in collection.root.parts[len(base_music_dir.parts) :]:
        choices.append(prt)
    click.secho(f"{collection.root} ({len(collection.paths)} songs)", fg="blue")
    for tag, force_individual_prompt in BASIC_TAGS.items():

        # if there are extra spaces on ID3 data, remove them
        for f in collection.paths:
            id3f = safe_id3(f)
            for stag in BASIC_TAGS:
                if stag in id3f and len(id3f[stag]) == 1:
                    data = id3f[stag][0]
                    if data != data.strip():
                        new_data = [data.strip()]
                        click.echo(f"Adding {stag}={new_data} for {f}...")
                        id3f[stag] = new_data
                        id3f.save()

        if force or _has_any_missing_basic_id3(collection, tag):
            if force_individual_prompt or click.confirm(
                f"Set Custom values for {click.style(tag, fg='red')} for each file?"
            ):
                for f in collection.paths:
                    cc = list(choices)  # choices which includes this filename
                    cc.extend(_extract_current_id3_data(f))
                    cc.append(f.stem)
                    # dict-like object which supports writing to tags using property-like attrs
                    id3f = safe_id3(f)
                    if tag not in id3f or force:
                        click.echo(f"Editing {click.style(tag, fg='red')} for {f}")
                        new_data = [
                            _pick_and_or_edit(
                                cc, f"Pick closest to {click.style(tag, fg='red')}"
                            )
                        ]
                        # overwrite if forcing
                        id3f[tag] = new_data
                        click.echo(f"Adding {tag}={new_data} for {f}...")
                        id3f.save()
            else:
                new_data = [
                    _pick_and_or_edit(
                        choices, f"Pick closest to {click.style(tag, fg='red')}"
                    )
                ]
                for f in collection.paths:
                    id3f = safe_id3(f)
                    if tag not in id3f or force:
                        click.echo(f"Adding {tag}={new_data} for {f}...")
                        id3f[tag] = new_data
                        id3f.save()


possible_album_suffixes = ("jpg", "jpeg", "png")


# seems to make the most sense to me/is supported by foobar2000 mobile, so lets use that
DEFAULT_LINK_TARGET = "cover.jpg"


def iter_collection_images(collection: Collection, /) -> Iterator[Path]:
    for fl in collection.root.rglob("*"):
        if fl.is_dir():
            continue
        if fl.suffix.casefold().strip(".") in possible_album_suffixes:
            yield fl


id3stuff_tmp = Path(tempfile.gettempdir()) / "id3stuff-temp"


def id3stuff_tempdir() -> Path:
    return Path(tempfile.mkdtemp(dir=id3stuff_tmp))


def _download_img(url: str) -> Path | None:
    download_to_filename = os.path.basename(urlparse(url).path)

    r = requests.get(url, stream=True)
    if r.status_code != 200:
        eprint(f"Downloading {url} failed with status code {r.status_code}...")
        return None

    write_to = id3stuff_tempdir() / download_to_filename

    with open(write_to, "wb") as f:
        for chunk in r:
            f.write(chunk)

    return write_to


def _fetch_remote_image(c: Collection, /) -> Path | None:
    """
    returns a path to a downloaded album art in /tmp/id3stuff
    """
    BASE_URL = "https://www.google.com/search?q={}&tbm=isch&sclient=img"
    assert len(c.paths) >= 1
    pth: Path = c.paths[0]
    data = _extract_current_id3_data(
        pth,
        for_tags=(
            "artist",
            "album",
        ),
        add_single_description=False,
    )
    search_url = BASE_URL.format(
        " ".join(data).replace("&", "").replace(" ", "+") + " album"
    )
    click.echo(f"Opening {search_url}...")
    webbrowser.open(search_url)
    img_url = click.prompt("Enter IMG url to use").strip()
    res = None
    while res is None:
        res = _download_img(img_url)
        if res is None:
            img_url = click.prompt("Enter IMG url to use").strip()
        else:
            return res


KITTY_PATH = shutil.which("kitty")


def _print_kitty_images(imgs: List[Path]) -> bool:
    if os.environ.get("TERM") != "xterm-kitty":
        return False
    printed = False
    assert KITTY_PATH is not None, "could not find kitty on your path"
    for img in imgs:
        print(f"\n{img}\n")
        subprocess.run([KITTY_PATH, "icat", str(img)])
        printed = True
    return printed


def _extract_apic_album_art(c: Collection, /) -> List[Path]:
    assert len(c.paths) >= 1
    pth: Path = c.paths[0]
    if pth.suffix != ".mp3":
        return []
    tags = ID3(pth)
    apic_frames = tags.getall("APIC")
    assert isinstance(apic_frames, list)
    if len(apic_frames) > 0:
        res = []
        tmpdir = id3stuff_tempdir()
        for i, fr in enumerate(apic_frames, 1):
            image_bytes = BytesIO(fr.data)
            img_obj = Image.open(image_bytes)
            if img_obj.format not in {"JPEG", "PNG"}:
                continue
            write_to = tmpdir / f"{str(i).zfill(3)}.{str(img_obj.format).lower()}"
            try:
                img_obj.save(str(write_to))
                res.append(write_to)
            except OSError:
                pass
        return res
    return []


def _pick_image(
    c: Collection, imgs: List[Path], /, *, skip_downloads: bool
) -> Path | None:
    _print_kitty_images(imgs)
    if len(imgs) == 1:
        if click.confirm(f"Use {imgs[0]}?", default=True):
            return imgs[0]
    elif len(imgs) > 1:
        # prompt to pick one of the paths
        getchar_choices = [str(f.absolute()) for f in imgs] + [OTHER]
        picked_index = _ui_getchar_pick(getchar_choices)
        picked_selection = getchar_choices[picked_index]
        if picked_selection != OTHER:
            pth = Path(picked_selection)
            assert pth.exists(), f"path {pth} doesnt exist"
            return pth
    if not skip_downloads and click.confirm("Search for URL?", default=True):
        downloaded = _fetch_remote_image(c)
        if downloaded is not None:
            imgs = [downloaded]
            _print_kitty_images(imgs)
            return downloaded
    return None


def _convert_image(chosen: Path | None, target: Path, /) -> None:
    if chosen is None:
        return
    chosen_ext = chosen.suffix.lower()
    # if filename doesnt have an extension, load the image and infer
    if chosen_ext == "":
        with chosen.open("rb") as img_f:
            img = Image.open(img_f)
            chosen_ext = f".{str(img.format).casefold()}"
    # convert '.jpeg' to '.jpg'
    if chosen_ext == ".jpeg":
        chosen_ext = ".jpg"
    if chosen_ext == target.suffix:
        if "id3stuff-temp" in str(chosen):
            # prevent cross-device (/tmp) links
            eprint(f"Copying '{chosen}' to '{target}'")
            shutil.copyfile(chosen, target)
        else:
            eprint(f"Linking '{chosen}' to '{target}'")
            target.hardlink_to(chosen)
    elif chosen_ext == ".png":
        eprint(f"Converting '{chosen}' to '{target}'")
        img = Image.open(chosen)
        # remove transparency if present
        if img.mode in ("RGBA", "P"):
            img = img.convert("RGB")
        img.save(str(target.absolute()))
    else:
        click.echo(f"Dont know how to convert extension {chosen_ext}")


def _remove_apic_frames(collection: Collection, /) -> None:
    for file in collection.paths:
        tags = ID3(file)
        apic_frames = tags.getall("APIC")
        if frame_count := len(apic_frames):
            eprint(f"Removing {frame_count} APIC frames from {file}")
            tags.delall("APIC")
            tags.save()


def manage_album_art(
    collection: Collection,
    /,
    *,
    remove_embedded_album_art: bool,
    to_filename: str = DEFAULT_LINK_TARGET,
    skip_downloads: bool = True,
) -> None:
    images = list(iter_collection_images(collection))
    images += _extract_apic_album_art(collection)
    target = collection.root / to_filename
    if not target.exists():
        chosen = _pick_image(collection, images, skip_downloads=skip_downloads)
        _convert_image(chosen, target)
    if target.exists() and remove_embedded_album_art:
        _remove_apic_frames(collection)


@click.command(name=__name__)
@click.option(
    "--print",
    "_print",
    is_flag=True,
    default=False,
    help="Just print the computed collections",
)
@click.option(
    "--force/--no-force",
    "force",
    is_flag=True,
    default=False,
    help="Force prompts for every attribute",
)
@click.option(
    "--link-cover-to",
    default=DEFAULT_LINK_TARGET,
    help="Filename to link/convert album art to",
)
@click.option(
    "--skip-downloads/--no-skip-downloads",
    is_flag=True,
    default=False,
    help="Skip asking to download art for images",
)
@click.option(
    "--remove-embedded-album-art/--keep-embedded-album-art",
    is_flag=True,
    default=True,
    help="Remove embedded album art in APIC frames from MP3 files, if they're present",
)
@click.option("--reverse", is_flag=True, default=False)
@click.argument("PATH", type=click.Path(exists=True), required=False)
def main(
    _print: bool,
    path: Optional[str],
    force: bool,
    link_cover_to: str,
    remove_embedded_album_art: bool,
    skip_downloads: bool,
    reverse: bool,
) -> None:
    if not id3stuff_tmp.exists():
        id3stuff_tmp.mkdir(parents=True)
    chosen_dir: Path
    if path is not None:
        chosen_dir = Path(path)
    else:
        chosen_dir = default_music_dir()
    collections = list(
        sorted(
            Collection.iter_ext_collection(chosen_dir.absolute(), ext="mp3"),
            key=lambda c: str(c.root).casefold(),
            reverse=reverse,
        )
    )
    if _print:
        pprint(collections)
    else:
        # 'main' loop if no other command
        for c in collections:
            attach_basic_id3_metadata(
                base_music_dir=chosen_dir, collection=c, force=force
            )
            manage_album_art(
                c,
                to_filename=link_cover_to,
                skip_downloads=skip_downloads,
                remove_embedded_album_art=remove_embedded_album_art,
            )


if __name__ == "__main__":
    main(prog_name="id3stuff")
