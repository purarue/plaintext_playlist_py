#!/usr/bin/env python3

## Still a WIP

"""
Personal opinionated ID3 stuff

- Make sure everything has a Artist/Album
- prompt for Album Art to be copied/downloaded to 'cover.jpg' if not present

In the future... ?

- Resolve broken/similar artists names for the same artist (different spellings/translations)
- Add Track Numbers
- Perhaps make this Plex Compliant with some other tool?
- Add Year
- Add Genre
- Add Lyrics
- Remove Comments/Useless Data

For things like comments/removing data, is sort of hard to imagine doing
this without mainting some sort of index of what I've asked for previously

Shouldn't use the path name since this modifies path names, so perhaps some hash
or combination of metadata could be used to create a unique hash
"""

import os
import tempfile
import shutil
import subprocess
from typing import Sequence, List, Optional, Dict, Iterator
from functools import partial
from pathlib import Path
from pprint import pprint

import click
from PIL import Image
from mutagen.id3 import ID3, ID3NoHeaderError  # type: ignore[import]
from mutagen.easyid3 import EasyID3  # type: ignore[import]
from my.core.__main__ import _ui_getchar_pick  # from https://github.com/karlicoss/HPI
from plaintext_playlist_py import Collection


eprint = partial(click.echo, err=True)


OTHER = "Other"


def _pick_and_or_edit(choices: List[str], prompt: str = "Select from:") -> str:
    """
    Pick from the choices (parts of the Path) to start off with
    then possibly edit the text in your editor to get it to exactly what you want
    """

    ch = list(choices)
    ch.append(OTHER)

    chosen = ch[_ui_getchar_pick(ch, prompt=prompt)]
    if chosen == OTHER:
        chosen = ""

    if chosen == "" or click.confirm(f"Edit {chosen}?", default=False):
        res = click.edit(chosen)
        if res is not None:  # None if no changes made to text
            chosen = res.strip()

    return chosen


# whether to prompt individually each time
BASIC_TAGS: Dict[str, bool] = {
    "title": True,
    "artist": False,
    "album": False,
    "albumartist": False,
}


def safe_id3(f: Path) -> EasyID3:
    try:
        return EasyID3(f)
    except ID3NoHeaderError:
        # create a empty ID3 frame if nothing exists
        new_data = ID3()
        new_data.save(f)
        return EasyID3(f)


# if key is None, checks all BASIC_TAGS. else, checks the one you specify
def _has_any_missing_basic_id3(
    collection: Collection, key: Optional[str] = None
) -> bool:
    if key is None:
        for tag in BASIC_TAGS:
            if _has_any_missing_basic_id3(collection, key=tag):
                return True
    else:
        for f in collection.paths:
            id3f = safe_id3(f)
            if key not in id3f:
                click.echo(f"{f} missing {key}")
                return True
            else:
                data = id3f[key]
                # no data on the key
                if len(data) == 0:
                    return True
                # if the text is empty
                if len(data[0].strip()) == 0:
                    return True
    return False


def _extract_current_id3_data(mp3: Path) -> Sequence[str]:
    tags: List[str] = []
    e = safe_id3(mp3)
    for tag in BASIC_TAGS:
        if tag in e:
            for data in e[tag]:
                tags.append(data)
    # Add Song Name - Title to the list of choices
    # so creating 'singles' Albums is easy
    if "title" in e and e["title"]:
        title = e["title"][0]
        tags.append(f"{title} - Single")
    return tuple(tags)


def attach_basic_id3_metadata(
    *, base_music_dir: Path, collection: Collection, force: bool = False
) -> None:
    """
    Track Name
    Artist
    Album
    AlbumArtist

    The force flag can be given to force a prompt, even if the tags already
    exist. Can be thought of as overwriting the data
    """
    choices = []
    for prt in collection.root.parts[len(base_music_dir.parts) :]:
        choices.append(prt)
    pprint(collection)
    click.secho(collection.root, fg="blue")
    click.secho(f"{len(collection.paths)} songs", fg="blue")
    for tag, force_individual_prompt in BASIC_TAGS.items():

        # if there are extra spaces on ID3 data, remove them
        for f in collection.paths:
            id3f = safe_id3(f)
            for stag in BASIC_TAGS:
                if stag in id3f and len(id3f[stag]) == 1:
                    data = id3f[stag][0]
                    if data != data.strip():
                        new_data = [data.strip()]
                        click.echo(f"Adding {stag}={new_data} for {f}...")
                        id3f[stag] = new_data
                        id3f.save()

        if force or _has_any_missing_basic_id3(collection, tag):
            if force_individual_prompt or click.confirm(
                f"Set Custom values for {click.style(tag, fg='red')} for each file?"
            ):
                for f in collection.paths:
                    cc = list(choices)  # choices which includes this filename
                    cc.extend(_extract_current_id3_data(f))
                    cc.append(f.stem)
                    # dict-like object which supports writing to tags using property-like attrs
                    id3f = safe_id3(f)
                    if tag not in id3f or force:
                        click.echo(f"Editing {click.style(tag, fg='red')} for {f}")
                        new_data = [
                            _pick_and_or_edit(
                                cc, f"Pick closest to {click.style(tag, fg='red')}"
                            )
                        ]
                        # overwrite if forcing
                        id3f[tag] = new_data
                        click.echo(f"Adding {tag}={new_data} for {f}...")
                        id3f.save()
            else:
                new_data = [
                    _pick_and_or_edit(
                        choices, f"Pick closest to {click.style(tag, fg='red')}"
                    )
                ]
                for f in collection.paths:
                    id3f = safe_id3(f)
                    if tag not in id3f or force:
                        click.echo(f"Adding {tag}={new_data} for {f}...")
                        id3f[tag] = new_data
                        id3f.save()


# https://github.com/mpv-player/mpv/blob/3d9c0eae9e4d42494b9435ad3cf5c31217e262ad/player/external_files.c#L49-L69
possible_album_prefixes = (
    "front",
    "cover",
    "folder",
    ".folder" "albumart",
    "album",
    "albumartsmall",
    "thumb",
)

possible_album_suffixes = ("jpg", "jpeg", "png")


# seems to make the most sense to me/is supported by foobar2000 mobile, so lets use that
DEFAULT_LINK_TARGET = "cover.jpg"


def iter_collection_album_art(collection: Collection, /) -> Iterator[Path]:
    for fl in collection.root.iterdir():
        for prefix in possible_album_prefixes:
            for suffix in possible_album_suffixes:
                possible_target = collection.root / f"{prefix}.{suffix}"
                if str(fl).casefold() == str(possible_target).casefold():
                    yield fl


id3stuff_tmp = os.path.join(tempfile.gettempdir(), "id3stuff")


def id3stuff_tempdir() -> Path:
    return Path(tempfile.mkdtemp(dir=id3stuff_tmp))


def _download_remote_image(c: Collection, /) -> Path | None:
    """
    returns a path to a downloaded album art in /tmp/id3stuff
    """
    return None
    # tdir = id3stuff_tempdir()


KITTY_PATH = shutil.which("kitty")


def _print_kitty_images(imgs: List[Path]) -> None:
    if os.environ.get("TERM") != "xterm-kitty":
        return
    assert KITTY_PATH is not None, f"could not find kitty on your path"
    for img in imgs:
        print(f"\n{img}\n")
        subprocess.run([KITTY_PATH, "icat", str(img)])


def _pick_image(
    c: Collection, imgs: List[Path], /, *, skip_downloads: bool
) -> Path | None:
    _print_kitty_images(imgs)
    if len(imgs) == 1:
        if click.confirm(f"Use {imgs[0]}?", default=True):
            return imgs[0]
    if len(imgs) > 1:
        # prompt to pick one of the paths
        getchar_choices = [str(f.absolute()) for f in imgs] + [OTHER]
        picked_index = _ui_getchar_pick(getchar_choices)
        picked_selection = getchar_choices[picked_index]
        if picked_selection != OTHER:
            pth = Path(picked_selection)
            assert pth.exists(), f"path {pth} doesnt exist"
            return pth
    if not skip_downloads and click.confirm(
        "Enter URL to download image from?", default=False
    ):
        return _download_remote_image(c)
    return None


def link_album_art(
    collection: Collection,
    /,
    *,
    to_filename: str = DEFAULT_LINK_TARGET,
    skip_downloads: bool = True,
) -> None:
    images = list(iter_collection_album_art(collection))
    target = collection.root / to_filename
    if target.exists():
        return
    chosen = _pick_image(collection, images, skip_downloads=skip_downloads)
    if chosen is not None:
        chosen_ext = chosen.suffix
        if chosen_ext == ".jpeg":
            chosen_ext = ".jpg"
        if chosen_ext == target.suffix:
            click.echo(f"Linking '{chosen}' to '{target}'", err=True)
            target.hardlink_to(chosen)
        elif chosen_ext == ".png":
            click.echo(f"Converting '{chosen}' to '{target}'", err=True)
            img = Image.open(chosen)
            if img.mode in ("RGBA", "P"):
                img = img.convert("RGB")
            img.save(str(target.absolute()))
        else:
            click.echo(f"Dont know how to convert extension {chosen_ext}")


def default_music_dir() -> Path:
    for env_key in ("PLAINTEXT_PLAYLIST_MUSIC_DIR", "XDG_MUSIC_DIR"):
        if env_key in os.environ:
            p = Path(os.environ[env_key])
            if not p.exists():
                click.echo(
                    f"Using default {env_key}, path {os.environ[env_key]} doesn't exist!",
                    err=True,
                )
                continue
            return p
    click.secho(
        "No music dir found in the environment -- set the XDG_MUSIC_DIR environment variable",
        err=True,
        fg="red",
    )
    raise SystemExit(1)


@click.command(name=__name__)
@click.option(
    "--print",
    "_print",
    is_flag=True,
    default=False,
    help="Just print the computed collections",
)
@click.option(
    "--force/--no-force",
    "force",
    is_flag=True,
    default=False,
    help="Force prompts for every attribute",
)
@click.option(
    "--link-cover-to",
    default=DEFAULT_LINK_TARGET,
    help="Filename to link/convert album art to",
)
@click.option(
    "--skip-downloads/--no-skip-downloads",
    is_flag=True,
    default=True,
    help="Skip asking to download art for images",
)
@click.option("--reverse", is_flag=True, default=False)
@click.argument("PATH", type=click.Path(exists=True), required=False)
def main(
    _print: bool,
    path: Optional[str],
    force: bool,
    link_cover_to: str,
    skip_downloads: bool,
    reverse: bool,
) -> None:
    chosen_dir: Path
    if path is not None:
        chosen_dir = Path(path)
    else:
        chosen_dir = default_music_dir()
    collections = list(
        sorted(
            Collection.iter_ext_collection(chosen_dir.absolute(), ext="mp3"),
            key=lambda c: str(c.root).casefold(),
            reverse=reverse,
        )
    )
    if _print:
        pprint(collections)
    else:
        # 'main' loop if no other command
        for c in collections:
            attach_basic_id3_metadata(
                base_music_dir=chosen_dir, collection=c, force=force
            )
            link_album_art(c, to_filename=link_cover_to, skip_downloads=skip_downloads)


if __name__ == "__main__":
    main(prog_name="id3stuff")
