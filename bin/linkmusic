#!/usr/bin/env python3

"""
https://github.com/seanbreckenridge/plaintext-playlist

A script which hardlinks all current files in my playlists to a separate
folder structure, so that folder can be synced across my devices

This allows me to sync songs I like (i.e. ones in playlist) across
all my devices without using a ton of space

This works sort of like rsync --delete-after

The TARGET directory is provided as the first argument to this script

\b
- Creates an index of items in the TARGET directory
- Hardlink any files from my PLAINTEXT_PLAYLIST_MUSIC_DIR into the TARGET directory
- If there were any files in the index of the files in the TARGET directory that weren't
  copied, remove those from TARGET; those are items I deleted from playlists/renamed
- Remove any empty directories in the TARGET directory

I sync this across my computers/phone by using syncthing
"""

import sys
import os
from pathlib import Path
from typing import Iterator, Dict

import click
from logzero import logger  # type: ignore[import]

from plaintext_playlist_py import (
    PlaylistPath,
    iterate_playlists,
    playlistdir,
    Collection,
)


def _check_os() -> None:
    ON_OS = os.environ.get("ON_OS")
    if ON_OS is None:
        raise ValueError(
            "$ON_OS environment variable is none. Set to 'linux' to let this run"
        )
    else:
        if ON_OS.startswith("linux"):
            return
        raise ValueError(
            "$ON_OS environment variable is not linux. This should only run on my linux machine"
        )


def iter_files(in_dir: Path) -> Iterator[str]:
    """Recursively List files in a directory"""
    yield from map(
        lambda f: str(f.absolute()), filter(lambda f: f.is_file(), in_dir.rglob("*"))
    )


def remove_empty_dir(path: str, *, cover_image_name: str) -> None:
    if os.listdir(path) == [cover_image_name]:
        cover_img = os.path.join(path, cover_image_name)
        assert os.path.exists(cover_img), f"Expected {cover_img} to exist"
        logger.debug(f"Removing {cover_img}")
        os.unlink(cover_img)
    try:
        # only removes if this is empty
        os.rmdir(path)
    except OSError:
        pass
    else:
        logger.debug(f"Removed empty directory {path}")


def remove_empty_dirs(path: str, *, cover_image_name: str) -> None:
    # remove empty directories
    for root, dirnames, _ in os.walk(path, topdown=False):
        for dirname in dirnames:
            if dirname.startswith("."):
                continue
            remove_empty_dir(
                os.path.realpath(os.path.join(root, dirname)),
                cover_image_name=cover_image_name,
            )


def _hardlink_file(source: Path, target: Path) -> None:
    if source.is_dir():
        logger.warning(f"{source} is a directory, skipping...")
        return
    if not target.exists() or target.stat().st_size != source.stat().st_size:
        target.parent.mkdir(parents=True, exist_ok=True)
        if target.exists():
            # source and target are different files -- so I probably trimmed or changed
            # the file -- should remove the target musicsync file
            logger.info(
                f"Target '{target}' exists, size didn't match -- removing and re-linking..."
            )
            target.unlink()
        logger.info(f"Linking from '{source}' to '{target}'")
        target.hardlink_to(source)


def hardlink_sync_dirs(
    files: list[PlaylistPath], *, cover_image_name: str, to_dir: Path, delete: bool
) -> None:
    """
    Essentially a manual rsync --delete-after with hardlinks
    Copies all items from files into to_dir, deletes and items
    that weren't mentioned
    """
    to_dir.mkdir(parents=True, exist_ok=True)
    already_in_set: set[str] = set()
    # recursively iterate through files already in to_dir
    # get relative paths to taret directory so we can compare
    for absf in iter_files(to_dir):
        already_in_set.add(absf[len(str(to_dir)) + 1 :])

    seen_source_collection_roots: Dict[Path, PlaylistPath] = {}

    # copy link if it doesnt already exist on target
    for p in files:
        target = p.in_dir(to_dir)
        source = p.in_musicdir()
        if p.collection_root() not in seen_source_collection_roots:
            seen_source_collection_roots[p.collection_root()] = p
        _hardlink_file(source, target)
        # remove from set, so at the end we can check
        # the set. If theres anything left in it,
        # that wasn't included in the 'files' list,
        # i.e. its been deleted from a playlist
        ps = p.path.strip(os.linesep)
        if ps in already_in_set:
            already_in_set.remove(ps)

    logger.info(
        f"Checking {len(seen_source_collection_roots)} collections for album art..."
    )
    for collection_root_path in seen_source_collection_roots:
        collection = Collection.from_root(collection_root_path)
        if collection is None:
            continue
        cover_art = collection.root / cover_image_name
        if cover_art.exists():
            assert len(collection.paths) > 0, str(collection)
            sync_to_dir = (
                seen_source_collection_roots[collection_root_path].in_dir(to_dir).parent
            )
            assert sync_to_dir.stem == collection.root.stem
            _hardlink_file(cover_art, sync_to_dir / cover_image_name)

    if delete:
        for removed in already_in_set:
            to_remove: Path = PlaylistPath(removed).in_dir(to_dir)
            # dont remove hidden files
            if to_remove.stem.startswith("."):
                continue
            # dont remove cover art
            if to_remove.parts[-1] == cover_image_name:
                continue
            logger.info(f"Removing '{to_remove}'...")
            to_remove.unlink()

        remove_empty_dirs(str(to_dir), cover_image_name=cover_image_name)


@click.command(help=__doc__)
@click.option(
    "--bypass",
    default=False,
    is_flag=True,
    help="Dont check the $ON_OS environment variable to make this is running on my linux machine",
)
@click.option(
    "--delete",
    "delete",
    default=False,
    is_flag=True,
    help="Delete files that I've removed from my playlists",
)
@click.option(
    "--cover",
    type=str,
    default="cover.jpg",
    help="Filename of album art in each directory",
)
@click.argument("SYNC_TO", type=click.Path())
def main(bypass: bool, cover: str, sync_to: str, delete: bool):
    if not bypass:
        try:
            _check_os()
        except ValueError as e:
            click.echo(str(e), err=True)
            click.echo("To ignore this, pass --bypass")
            sys.exit(1)
    playlistlines = list(iterate_playlists(playlistdir(), exclude_if_starts_with=[]))
    logger.info(f"Syncing {len(playlistlines)} files...")
    assert len(playlistlines) > 0
    hardlink_sync_dirs(
        playlistlines, cover_image_name=cover, to_dir=Path(sync_to), delete=delete
    )
    logger.info("Done!")


if __name__ == "__main__":
    main(prog_name="linkmusic")
